{"version":3,"sources":["components/Carousel/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","currentSlide","handlePrev","props","images","step","frameSize","itemWidth","infinite","setState","length","handleNext","this","animationDuration","className","style","width","transform","transition","map","img","src","alt","indexOf","type","onClick","disabled","Component","App","htmlFor","id","defaultValue","min","onChange","e","target","value","currentTarget","checked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cdb3fb95.chunk.js","sourcesContent":["/* eslint-disable react/no-unused-prop-types */\nimport { Component } from 'react';\nimport './Carousel.scss';\n\ninterface State {\n  currentSlide: number;\n}\n\ninterface Props {\n  images: string[];\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n}\n\nexport class Carousel extends Component<Props, State> {\n  state = {\n    currentSlide: 0,\n  };\n\n  handlePrev = () => {\n    const { currentSlide } = this.state;\n\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      infinite,\n    } = this.props;\n\n    if (currentSlide < 0) {\n      if (currentSlide + (itemWidth * step) > 0) {\n        this.setState({ currentSlide: 0 });\n\n        return;\n      }\n\n      this.setState({ currentSlide: currentSlide + (itemWidth * step) });\n    }\n\n    if (infinite && currentSlide === 0) {\n      this.setState({\n        currentSlide:\n        (images.length * itemWidth - frameSize * itemWidth) * -1,\n      });\n    }\n  };\n\n  handleNext = () => {\n    const { currentSlide } = this.state;\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n    } = this.props;\n\n    if (currentSlide\n      > (images.length * itemWidth - frameSize * itemWidth) * -1\n    ) {\n      if (currentSlide - (itemWidth * step)\n      < (images.length * itemWidth - frameSize * itemWidth) * -1) {\n        this.setState({\n          currentSlide:\n          (images.length * itemWidth - frameSize * itemWidth) * -1,\n        });\n\n        return;\n      }\n\n      this.setState({ currentSlide: currentSlide - (itemWidth * step) });\n    }\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.props;\n\n    const { currentSlide } = this.state;\n\n    return (\n      <div className=\"carousel\" style={{ width: frameSize * itemWidth }}>\n        <ul\n          className=\"carousel__list\"\n          style={{\n            transform: `translate(${step * itemWidth}px, 0)`,\n            transition: `all ${animationDuration}ms ease`,\n          }}\n        >\n          {images.map(img => (\n            <li key={images.indexOf(img)}>\n              <img\n                src={`${img}`}\n                alt=\"Emojy\"\n                style={{ width: itemWidth }}\n              />\n            </li>\n          ))}\n        </ul>\n\n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            onClick={this.handlePrev}\n            disabled={\n              infinite ? false : currentSlide === 0\n            }\n          >\n            &lt;\n          </button>\n          <button\n            data-cy=\"next\"\n            onClick={this.handleNext}\n            type=\"button\"\n            disabled={\n              infinite\n                ? false\n                : currentSlide === (\n                  images.length * itemWidth - frameSize * itemWidth\n                ) * -1\n            }\n          >\n            &gt;\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import { Component } from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel/Carousel';\n\ninterface State {\n  images: string[];\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n}\n\nexport class App extends Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  render() {\n    const {\n      images, step, frameSize, itemWidth, animationDuration, infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1 data-cy=\"title\">Carousel with {images.length} images</h1>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n\n        <form className=\"form\">\n          <label htmlFor=\"itemWidth\" className=\"form__label\">\n            Item width\n            <br />\n            <input\n              type=\"number\"\n              id=\"itemWidth\"\n              defaultValue={130}\n              min={130}\n              onChange={(e) => {\n                this.setState({ itemWidth: +e.target.value });\n              }}\n            />\n          </label>\n          <label htmlFor=\"frameSize\" className=\"form__label\">\n            Frame size\n            <br />\n            <input\n              type=\"number\"\n              id=\"frameSize\"\n              defaultValue={3}\n              min={1}\n              onChange={(e) => {\n                this.setState({ frameSize: +e.target.value });\n              }}\n            />\n          </label>\n          <label htmlFor=\"step\" className=\"form__label\">\n            Step\n            <br />\n            <input\n              type=\"number\"\n              id=\"step\"\n              defaultValue={3}\n              min={1}\n              onChange={(e) => {\n                this.setState({ step: +e.target.value });\n              }}\n            />\n          </label>\n          <label htmlFor=\"animationDuration\" className=\"form__label\">\n            Animation duration\n            <br />\n            <input\n              type=\"number\"\n              id=\"animationDuration\"\n              defaultValue={1000}\n              min={0}\n              step=\"1000\"\n              onChange={(e) => {\n                this.setState({ animationDuration: +e.target.value });\n              }}\n            />\n          </label>\n          <label htmlFor=\"infinite\" className=\"form__label\">\n            Infinite\n            <br />\n            <input\n              type=\"checkbox\"\n              id=\"infinite\"\n              onClick={(e) => {\n                this.setState({ infinite: e.currentTarget.checked });\n              }}\n            />\n          </label>\n        </form>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}